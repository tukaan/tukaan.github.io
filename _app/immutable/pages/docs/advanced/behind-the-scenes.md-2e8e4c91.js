import{S as Ue,i as We,s as Ge,e as s,t as o,k as d,c as l,a as c,h as n,d as a,m as f,b as v,g as r,R as e,n as ue}from"../../../chunks/index-cd4ba230.js";function Je(Me){let y,ft,$,T,bt,I,mt,kt,tt,w,Se='<code class="language-python"><span class="token keyword">from</span> tukaan<span class="token punctuation">.</span>_tcl <span class="token keyword">import</span> Tcl</code>',et,E,yt,at,D,L,Tt,ot,k,_t,q,vt,wt,H,Et,gt,N,Pt,nt,g,Ye=`<code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Tcl<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"grid"</span><span class="token punctuation">,</span> textbox_widget<span class="token punctuation">,</span> <span class="token operator">*</span>Tcl<span class="token punctuation">.</span>to_tcl_args<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> rowspan<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">None</span>
<span class="token operator">>></span><span class="token operator">></span> Tcl<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> textbox_widget<span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">)</span>
foobar</code>`,st,h,Ot,R,Ct,xt,A,Dt,jt,F,It,Lt,M,qt,Ht,S,Nt,Rt,lt,b,At,Y,Ft,Mt,B,St,Yt,z,Bt,zt,ct,P,Be=`<code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Tcl<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"grid .app.textbox_1 -column 3 -rowspan 8"</span><span class="token punctuation">)</span>
<span class="token boolean">None</span>
<span class="token operator">>></span><span class="token operator">></span> Tcl<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token string">".app.textbox_1 get"</span><span class="token punctuation">)</span>
foobar</code>`,it,O,Kt,rt,p,Qt,K,Ut,Wt,C,Gt,Jt,Q,Vt,Xt,U,Zt,$t,W,te,ee,G,ae,oe,J,ne,se,V,le,ce,X,ie,re,pt,ut,ht,j,Z,pe;return{c(){y=s("h1"),ft=o("The Tcl interface"),$=d(),T=s("p"),bt=o("The "),I=s("code"),mt=o("Tcl"),kt=o(" class is a bridge between Python and Tcl. It can be used to initialize the interpreter, to run the mainloop, to load dll files to Tk, and to call Tcl commands from Python."),tt=d(),w=s("pre"),et=d(),E=s("h2"),yt=o("Calling Tcl from Python"),at=d(),D=s("blockquote"),L=s("p"),Tt=o("There are two methods to call Tcl code in Tukaan."),ot=d(),k=s("p"),_t=o("The first is the "),q=s("code"),vt=o("Tcl.call"),wt=o(" method. You can pass in arbitary number of argument of any type (see "),H=s("code"),Et=o("Tcl.to"),gt=o(" below), and it will evaluate it. The first argument is always the return type of the call, if you don\u2019t expect any return it should be "),N=s("code"),Pt=o("None"),nt=d(),g=s("pre"),st=d(),h=s("p"),Ot=o("There\u2019s a utility method called "),R=s("code"),Ct=o("to_tcl_args"),xt=o(", which can be used to convert Python keyword arguments to Tcl keyword arguments ("),A=s("code"),Dt=o("column=3"),jt=o(" -> "),F=s("code"),It=o('("-column", "3")'),Lt=o("). It returns a tuple, which you have to unpack, when passing into "),M=s("code"),qt=o("Tcl.call"),Ht=o(" (with the "),S=s("code"),Nt=o("*"),Rt=o(" syntax)"),lt=d(),b=s("p"),At=o("The second is the "),Y=s("code"),Ft=o("Tcl.eval"),Mt=o(" method, which is very similar to Python\u2019s "),B=s("code"),St=o("exec"),Yt=o(" function, except in Tcl. It doesn\u2019t do any Py-to-Tcl conversion, so you can only pass in a single string, but this means that this function is also a lot faster. Similarly to "),z=s("code"),Bt=o("Tcl.call"),zt=o(" the first argument defines the return type. The second argument is the script to evaluate."),ct=d(),P=s("pre"),it=d(),O=s("h2"),Kt=o("About converting things to Tcl"),rt=d(),p=s("p"),Qt=o("You might know, that in Tcl everything is a string. Therefore Tukaan needs to convert every Python object to a string, and the strings returned from Tcl back to Python objects (this is the return value I was babbling about above). However, it isn\u2019t simply done by calling the "),K=s("code"),Ut=o("str()"),Wt=o(" function, but finding a way, that it can be represented in Tcl. For example when a Python funciont is passed in, it creates a new Tcl procedure at C-level, which will call the Python function (if you\u2019re really interested in this part, it\u2019s "),C=s("a"),Gt=o("here"),Jt=o(" in "),Q=s("code"),Vt=o("_tkinter.c"),Xt=o(`).
An object can also be converted to Tcl, if it has a `),U=s("code"),Zt=o("_name"),$t=o(" attribute. Widgets use this attribute to store thier pathName, with which they are represented in Tk (e.g. "),W=s("code"),te=o(".frame.notebook.tab_1.button"),ee=o(`).
If an object has a `),G=s("code"),ae=o("__to_tcl__"),oe=o(" method, but no "),J=s("code"),ne=o("_name"),se=o(", "),V=s("code"),le=o("Tcl.to"),ce=o(" will call it to represent the object to Tcl. This method is useful if you want to give a name to the object on the fly. For example, Tukaan adds a "),X=s("code"),ie=o("__to_tcl__"),re=o(" method to PIL images, which converts them to Tk images and then returns the image name, because by default PIL images aren\u2019t known by the Tcl interpreter."),pt=d(),ut=s("hr"),ht=d(),j=s("blockquote"),Z=s("p"),pe=o("TODO: Revise this, as it\u2019s just a quick sketch"),this.h()},l(t){y=l(t,"H1",{id:!0});var i=c(y);ft=n(i,"The Tcl interface"),i.forEach(a),$=f(t),T=l(t,"P",{});var dt=c(T);bt=n(dt,"The "),I=l(dt,"CODE",{});var he=c(I);mt=n(he,"Tcl"),he.forEach(a),kt=n(dt," class is a bridge between Python and Tcl. It can be used to initialize the interpreter, to run the mainloop, to load dll files to Tk, and to call Tcl commands from Python."),dt.forEach(a),tt=f(t),w=l(t,"PRE",{class:!0});var ze=c(w);ze.forEach(a),et=f(t),E=l(t,"H2",{id:!0});var de=c(E);yt=n(de,"Calling Tcl from Python"),de.forEach(a),at=f(t),D=l(t,"BLOCKQUOTE",{});var fe=c(D);L=l(fe,"P",{});var be=c(L);Tt=n(be,"There are two methods to call Tcl code in Tukaan."),be.forEach(a),fe.forEach(a),ot=f(t),k=l(t,"P",{});var x=c(k);_t=n(x,"The first is the "),q=l(x,"CODE",{});var me=c(q);vt=n(me,"Tcl.call"),me.forEach(a),wt=n(x," method. You can pass in arbitary number of argument of any type (see "),H=l(x,"CODE",{});var ke=c(H);Et=n(ke,"Tcl.to"),ke.forEach(a),gt=n(x," below), and it will evaluate it. The first argument is always the return type of the call, if you don\u2019t expect any return it should be "),N=l(x,"CODE",{});var ye=c(N);Pt=n(ye,"None"),ye.forEach(a),x.forEach(a),nt=f(t),g=l(t,"PRE",{class:!0});var Ke=c(g);Ke.forEach(a),st=f(t),h=l(t,"P",{});var m=c(h);Ot=n(m,"There\u2019s a utility method called "),R=l(m,"CODE",{});var Te=c(R);Ct=n(Te,"to_tcl_args"),Te.forEach(a),xt=n(m,", which can be used to convert Python keyword arguments to Tcl keyword arguments ("),A=l(m,"CODE",{});var _e=c(A);Dt=n(_e,"column=3"),_e.forEach(a),jt=n(m," -> "),F=l(m,"CODE",{});var ve=c(F);It=n(ve,'("-column", "3")'),ve.forEach(a),Lt=n(m,"). It returns a tuple, which you have to unpack, when passing into "),M=l(m,"CODE",{});var we=c(M);qt=n(we,"Tcl.call"),we.forEach(a),Ht=n(m," (with the "),S=l(m,"CODE",{});var Ee=c(S);Nt=n(Ee,"*"),Ee.forEach(a),Rt=n(m," syntax)"),m.forEach(a),lt=f(t),b=l(t,"P",{});var _=c(b);At=n(_,"The second is the "),Y=l(_,"CODE",{});var ge=c(Y);Ft=n(ge,"Tcl.eval"),ge.forEach(a),Mt=n(_," method, which is very similar to Python\u2019s "),B=l(_,"CODE",{});var Pe=c(B);St=n(Pe,"exec"),Pe.forEach(a),Yt=n(_," function, except in Tcl. It doesn\u2019t do any Py-to-Tcl conversion, so you can only pass in a single string, but this means that this function is also a lot faster. Similarly to "),z=l(_,"CODE",{});var Oe=c(z);Bt=n(Oe,"Tcl.call"),Oe.forEach(a),zt=n(_," the first argument defines the return type. The second argument is the script to evaluate."),_.forEach(a),ct=f(t),P=l(t,"PRE",{class:!0});var Qe=c(P);Qe.forEach(a),it=f(t),O=l(t,"H2",{id:!0});var Ce=c(O);Kt=n(Ce,"About converting things to Tcl"),Ce.forEach(a),rt=f(t),p=l(t,"P",{});var u=c(p);Qt=n(u,"You might know, that in Tcl everything is a string. Therefore Tukaan needs to convert every Python object to a string, and the strings returned from Tcl back to Python objects (this is the return value I was babbling about above). However, it isn\u2019t simply done by calling the "),K=l(u,"CODE",{});var xe=c(K);Ut=n(xe,"str()"),xe.forEach(a),Wt=n(u," function, but finding a way, that it can be represented in Tcl. For example when a Python funciont is passed in, it creates a new Tcl procedure at C-level, which will call the Python function (if you\u2019re really interested in this part, it\u2019s "),C=l(u,"A",{href:!0,rel:!0});var De=c(C);Gt=n(De,"here"),De.forEach(a),Jt=n(u," in "),Q=l(u,"CODE",{});var je=c(Q);Vt=n(je,"_tkinter.c"),je.forEach(a),Xt=n(u,`).
An object can also be converted to Tcl, if it has a `),U=l(u,"CODE",{});var Ie=c(U);Zt=n(Ie,"_name"),Ie.forEach(a),$t=n(u," attribute. Widgets use this attribute to store thier pathName, with which they are represented in Tk (e.g. "),W=l(u,"CODE",{});var Le=c(W);te=n(Le,".frame.notebook.tab_1.button"),Le.forEach(a),ee=n(u,`).
If an object has a `),G=l(u,"CODE",{});var qe=c(G);ae=n(qe,"__to_tcl__"),qe.forEach(a),oe=n(u," method, but no "),J=l(u,"CODE",{});var He=c(J);ne=n(He,"_name"),He.forEach(a),se=n(u,", "),V=l(u,"CODE",{});var Ne=c(V);le=n(Ne,"Tcl.to"),Ne.forEach(a),ce=n(u," will call it to represent the object to Tcl. This method is useful if you want to give a name to the object on the fly. For example, Tukaan adds a "),X=l(u,"CODE",{});var Re=c(X);ie=n(Re,"__to_tcl__"),Re.forEach(a),re=n(u," method to PIL images, which converts them to Tk images and then returns the image name, because by default PIL images aren\u2019t known by the Tcl interpreter."),u.forEach(a),pt=f(t),ut=l(t,"HR",{}),ht=f(t),j=l(t,"BLOCKQUOTE",{});var Ae=c(j);Z=l(Ae,"P",{});var Fe=c(Z);pe=n(Fe,"TODO: Revise this, as it\u2019s just a quick sketch"),Fe.forEach(a),Ae.forEach(a),this.h()},h(){v(y,"id","the-tcl-interface"),v(w,"class","language-python"),v(E,"id","calling-tcl-from-python"),v(g,"class","language-python"),v(P,"class","language-python"),v(O,"id","about-converting-things-to-tcl"),v(C,"href","https://github.com/python/cpython/blob/8feb7ab77c80968a6de6079299a39b0494b1701b/Modules/_tkinter.c#L2305"),v(C,"rel","nofollow")},m(t,i){r(t,y,i),e(y,ft),r(t,$,i),r(t,T,i),e(T,bt),e(T,I),e(I,mt),e(T,kt),r(t,tt,i),r(t,w,i),w.innerHTML=Se,r(t,et,i),r(t,E,i),e(E,yt),r(t,at,i),r(t,D,i),e(D,L),e(L,Tt),r(t,ot,i),r(t,k,i),e(k,_t),e(k,q),e(q,vt),e(k,wt),e(k,H),e(H,Et),e(k,gt),e(k,N),e(N,Pt),r(t,nt,i),r(t,g,i),g.innerHTML=Ye,r(t,st,i),r(t,h,i),e(h,Ot),e(h,R),e(R,Ct),e(h,xt),e(h,A),e(A,Dt),e(h,jt),e(h,F),e(F,It),e(h,Lt),e(h,M),e(M,qt),e(h,Ht),e(h,S),e(S,Nt),e(h,Rt),r(t,lt,i),r(t,b,i),e(b,At),e(b,Y),e(Y,Ft),e(b,Mt),e(b,B),e(B,St),e(b,Yt),e(b,z),e(z,Bt),e(b,zt),r(t,ct,i),r(t,P,i),P.innerHTML=Be,r(t,it,i),r(t,O,i),e(O,Kt),r(t,rt,i),r(t,p,i),e(p,Qt),e(p,K),e(K,Ut),e(p,Wt),e(p,C),e(C,Gt),e(p,Jt),e(p,Q),e(Q,Vt),e(p,Xt),e(p,U),e(U,Zt),e(p,$t),e(p,W),e(W,te),e(p,ee),e(p,G),e(G,ae),e(p,oe),e(p,J),e(J,ne),e(p,se),e(p,V),e(V,le),e(p,ce),e(p,X),e(X,ie),e(p,re),r(t,pt,i),r(t,ut,i),r(t,ht,i),r(t,j,i),e(j,Z),e(Z,pe)},p:ue,i:ue,o:ue,d(t){t&&a(y),t&&a($),t&&a(T),t&&a(tt),t&&a(w),t&&a(et),t&&a(E),t&&a(at),t&&a(D),t&&a(ot),t&&a(k),t&&a(nt),t&&a(g),t&&a(st),t&&a(h),t&&a(lt),t&&a(b),t&&a(ct),t&&a(P),t&&a(it),t&&a(O),t&&a(rt),t&&a(p),t&&a(pt),t&&a(ut),t&&a(ht),t&&a(j)}}}class Xe extends Ue{constructor(y){super(),We(this,y,null,Je,Ge,{})}}export{Xe as default};
